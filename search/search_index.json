{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Niflheim Quickstart","text":"<p>These pages should act as a gentle introduction for new users of Niflheim. You will learn how to access the resource, submit jobs, monitor your usage, and more. All information can also be found here: https://wiki.fysik.dtu.dk/Niflheim_users/</p>"},{"location":"#what-is-an-hpc-cluster","title":"What is an HPC cluster?","text":"<p>Niflheim is an HPC cluster. It is a collection of many separate servers (computers), called nodes, which are connected via a fast interconnect. There are different types of nodes for different types of tasks, such as login nodes and compute nodes.</p> <p>Login nodes are the nodes that you use to access the cluster. They are the gateway to the cluster and provide an interface for you to submit and manage your jobs. You can use login nodes to edit your files, compile your programs, and monitor your jobs. However, you should not run any intensive or long-running computations on login nodes, as they are shared by many users and have limited resources.</p> <p>Compute nodes are the nodes that actually run your jobs. Compute nodes are organized into partitions, which are groups of nodes with similar characteristics and policies. For example, there may be partitions for different types of CPUs or GPUs, different amounts of memory or storage, different time limits or priorities, etc. You can specify which partition you want to use when you submit your job with the <code>sbatch</code> command.</p> <p>Each compute node partition has a corresponding login node with the same CPU architechture. See details here.</p>"},{"location":"#some-rules-on-niflheim","title":"Some rules on Niflheim","text":"<ul> <li>Don't run real calculations on the login nodes, those should go to the compute nodes in batch jobs.</li> <li>Use all the CPUs of the compute nodes. Don't submit jobs that cannot run in parallel to other partitions than <code>xeon24</code>. In situations where parallelization cannot be achieved and <code>xeon24</code> does not suffice, contact the support. NB The partitions <code>xeon24</code>, <code>sm3090el8</code>, <code>a100</code> and <code>xeon32_4096</code> allow for jobs that don't use a full node.</li> <li>If your calculations are doing a lot of read/write operations to the disk please take advantage of the local node scratch disks</li> <li>If you require a lot of space for a temporary project, you can ask to get access to <code>/home/scratch3</code> (<code>/home/scratch3</code> has no backup). See also Storage</li> </ul>"},{"location":"#get-started","title":"Get started","text":"<p>Go to Quickstart</p>"},{"location":"editing-files/","title":"Editing files","text":"<p>When working on a HPC cluster, you will frequently need to edit files. For instance, you might need to modify scripts, or input/output files for your simulations or data analysis.</p> <p>When it comes to editing files in Linux, there are several command-line editors available, including Vim, Nano, and Emacs. Here are some basic commands for editing files with Emacs and Vim:</p>"},{"location":"editing-files/#emacs","title":"Emacs","text":"<p>To edit a file with Emacs, type <code>emacs -nw &lt;filename&gt;</code> in the terminal. Once you have opened the file, you can use the following commands to edit it:</p> <ul> <li><code>Ctrl + X</code> followed by <code>Ctrl + S</code>: Save the file.</li> <li><code>Ctrl + X</code> followed by <code>Ctrl + C</code>: Quit Emacs.</li> <li>Reference card</li> </ul>"},{"location":"editing-files/#vim","title":"Vim","text":"<p>To edit a file with Vim, type <code>vi &lt;filename&gt;</code> in the terminal. Once you have opened the file, you can use the following commands to edit it:</p> <ul> <li><code>i</code>: Enter insert mode.</li> <li><code>Esc</code>: Exit insert mode.</li> <li><code>:w</code>: Save the file.</li> <li><code>:q</code>: Quit Vim.</li> <li>Reference card</li> </ul>"},{"location":"editing-files/#nano","title":"Nano","text":"<p>To edit a file with Nano, type <code>nano &lt;filename&gt;</code> in the terminal. Once you have opened the file, you can use the following commands to edit it:</p> <ul> <li><code>Ctrl + O</code>: Save the file.</li> <li><code>Ctrl + X</code>: Quit Nano.</li> <li>Reference card</li> </ul>"},{"location":"editing-files/#transfer-files-tofrom-niflheim","title":"Transfer files to/from Niflheim","text":"<p>It is also possible to edit files on your local PC and then transfer them to Niflheim. It is possible to transfer file between your local machine and Niflheim with a program with a GUI e.g. FileZilla or MobaXterm. Or you can use a tool called SCP (Secure Copy). SCP uses SSH to securely copy files over the network. To use SCP, open another SSH client window and enter a command like this:</p> <pre><code>scp source destination\n</code></pre> <p>Replace source and destination with the paths of the files or directories you want to copy. The paths can be either local or remote. For example, to copy a file called <code>hello.py</code> from your local machine to your home directory on Niflheim, enter this command:</p> <pre><code>scp hello.py username@surt.fysik.dtu.dk:~\n</code></pre> <p>To copy a directory called <code>myproject</code> from your home directory on Niflheim to your local machine, enter this command:</p> <pre><code>scp -r username@surt.fysik.dtu.dk:~/myproject .\n</code></pre> <p>The -r option tells SCP to copy recursively, meaning it will copy all the files and subdirectories inside myproject.</p> <p>Remember that data created at DTU should stay at DTU. Niflheim has backup of home folders, so don't move important data away from Niflheim to a place without backup.</p>"},{"location":"linux/","title":"Useful Linux Commands","text":"<p>This page will introduce you to some of the most useful Linux commands that you can use on the hpc resource. Linux commands are case-sensitive and follow a general syntax of:</p> <pre><code>command [options] [arguments]\n</code></pre> <p>The <code>command</code> is the name of the program that you want to run, such as <code>ls</code>, <code>cd</code>, <code>cp</code>, etc. The <code>options</code> are optional flags that modify the behavior of the command, such as <code>-a</code>, <code>-l</code>, <code>-r</code>, etc. These can typically also be concatenated, e.g. <code>-alr</code>. The <code>arguments</code> are optional inputs that the command operates on, such as filenames, directories, patterns, etc.</p> <p>Here are some examples of common Linux commands and their usage:</p> <ul> <li> <p><code>ls</code>: List directory contents.For example, <code>ls</code> will list the files and directories in the current directory, while <code>ls /home/user</code> will list the files and directories in the <code>/home/user</code> directory. Recommended options for this command are:</p> <ul> <li><code>ls -lathr</code></li> </ul> </li> <li> <p><code>cd</code>: Change directory. For example, <code>cd /home/user</code> will change the current working directory to <code>/home/user</code>. Some useful shortcuts for this command are:</p> <ul> <li><code>cd ..</code>: This command moves up one level in the directory hierarchy. For example, if the current working directory is <code>/home/user/docs</code>, then <code>cd ..</code> will change it to <code>/home/user</code>.</li> <li><code>cd</code>: Move to the home directory of the current user.</li> <li><code>cd -</code>: Move to the previous folder.</li> </ul> </li> <li> <p><code>cp</code>: Copy files or directories. For example, <code>cp hello.py /home/user/docs</code> will copy the file <code>hello.py</code> from the current working directory to the <code>/home/user/docs</code> directory.</p> </li> <li> <p><code>mv</code>: Move or rename files or directories. For example, <code>mv hello.py goodbye.py</code> will rename the file <code>hello.py</code> to <code>goodbye.py</code>. Another example is <code>mv hello.py /home/user/docs</code> which will move the file <code>hello.py</code> from the current working directory to the <code>/home/user/docs</code> directory.</p> </li> <li> <p><code>rm</code>: Remove files or directories. <code>rm hello.py</code> will remove or delete the file <code>hello.py</code>. Some useful options for this command are:</p> <ul> <li><code>-r</code>: Remove recursively, meaning it will remove all the files and subdirectories inside a directory.</li> <li><code>-i</code>: Prompt before removing each file or directory.</li> </ul> </li> <li> <p><code>mkdir</code>: Create a new directory. Some useful options for this command are:</p> <ul> <li><code>-p</code>: This option creates parent directories if they do not exist.</li> </ul> </li> <li> <p><code>pwd</code>: Print the current working directory.</p> </li> <li> <p><code>cat</code>: Display file contents.</p> </li> <li> <p><code>less</code>: View and paginate file contents one screenful at a time. You can use the space bar to move to the next page, or the b key to move to the previous page.</p> </li> <li> <p><code>head</code> (<code>tail</code>): Display the first (last) lines of a file.</p> </li> <li> <p><code>grep</code>: Search for a pattern in a file or output. For example, <code>grep print hello.py</code> will print all the lines in the file <code>hello.py</code> that contain the word 'print'.</p> </li> <li> <p><code>man</code>: You can use the man command to display the user manual of any command that you can run on the terminal. For example, to view the manual pages of the <code>less</code> command, type <code>man less</code> in the terminal.</p> </li> </ul>"},{"location":"modules/","title":"How to load software on Niflheim","text":""},{"location":"modules/#what-are-software-modules","title":"What are software modules?","text":"<p>Software modules are a way of managing the availability and configuration of different software packages on a shared computing system. Software packages are collections of programs, libraries, and data that perform specific tasks or functions. For example, Python is a software package that provides a programming language and various libraries for scientific computing, data analysis, web development, etc.</p> <p>On a shared computing system, such as a cluster, there may be many different software packages installed for different users and purposes. However, not all of them may be compatible with each other or with the system environment. For example, some software packages may require different versions of the same library or different compilers or interpreters. Some software packages may also have different settings or options that affect their behavior or performance.</p> <p>To avoid conflicts and errors, software modules provide a way of controlling which software packages are available and properly configured for each user and session. Software modules are files that contain information and commands for setting up the environment variables, paths, libraries, options, etc. for a specific software package. By loading and unloading software modules, you can dynamically change the availability and configuration of different software packages on the cluster.</p>"},{"location":"modules/#module-commands","title":"module commands","text":"<ul> <li><code>module avail</code>: This subcommand shows the available software modules that you can load on the cluster. </li> </ul> <ul> <li><code>module load</code>: This subcommand loads one or more software modules into your current session. For example, <code>module load Python/3.11.3-GCCcore-12.3.0</code> will load the Python 3.11 module into your current session.</li> </ul> <ul> <li><code>module use</code>: The module use command is a way of adding or removing directories to or from the module search path. The module search path is a list of directories that the module command looks for module files. To make available modules installed by DTU Energy do:</li> </ul> <pre><code>module use /home/modules/energy/modules/all\nmodule use /home/energy/modules/modules/all\n</code></pre> <p>Note that after adding directories to the search path you can do <code>module avail</code> to see which modules were made available. You can also do <code>module avail &lt;SOFTWARE&gt;</code>, where <code>&lt;SOFTWARE&gt;</code> is the specific program you are interested in.</p> <ul> <li><code>module list</code>: This subcommand shows the loaded software modules in your current session.</li> </ul> <ul> <li><code>module purge</code>: This subcommand unloads all the loaded software modules from your current session. For example, <code>module purge</code> will unload all the software modules from your current session.</li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":"<p>This page will guide you through the basic steps to access and use Niflheim.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<p>We assume that you have an account on Niflheim. Before you start, you need to have:</p> <ul> <li>An SSH client on your local machine. For example you can use PuTTY or MobaXterm for Windows or Terminal for Mac/Linux.</li> </ul>"},{"location":"quickstart/#log-in-to-niflheim","title":"Log in to Niflheim","text":"<p>To log in to Niflheim, open your SSH client and enter the following command:</p> <pre><code>ssh username@surt.fysik.dtu.dk\n</code></pre> <p>Replace <code>username</code> with your actual username and <code>surt</code> with the hostname of the login node you want to connect to (<code>thul</code>, <code>slid</code>, <code>sylg</code>, <code>svol</code>, <code>fjorm</code> or <code>surt</code>). You will be prompted to enter your password. After you enter it, you should see a welcome message and a shell prompt.</p>"},{"location":"quickstart/#run-programs-on-niflheim","title":"Run programs on Niflheim","text":"<ul> <li>Make the program available by loading a software module</li> <li>Create a script to instruct the program what to do</li> <li>It is possible to test that your program works or your calculation will run on the login nodes, e.g. <code>python script.py</code>. Real calculations you need to submit for processing on a compute node. To submit jobs we use Slurm</li> </ul>"},{"location":"slurm/","title":"Submitting jobs with Slurm","text":"<p>This page will introduce you to submitting jobs with Slurm and some of the most useful Slurm commands that you can use on Niflheim. Slurm is a workload manager that allocates resources and schedules jobs on the cluster. You can use Slurm commands to submit, monitor, control, and manage your jobs.</p>"},{"location":"slurm/#slurm-job-script","title":"Slurm Job Script","text":"<p>A Slurm job script is a file that contains the parameters and commands for your job. You can use it to submit your job to the cluster with the <code>sbatch</code> command. A Slurm job script usually has two parts: a header and a body. The header contains lines that start with <code>#SBATCH</code> and specify the parameters for your job, such as the number of nodes, cores, memory, time, etc. The body contains the commands that you want to run on the allocated nodes, such as loading modules, running programs, copying files, etc.</p> <p>Here is an example of a Slurm job script that runs a Python script called <code>hello.py</code> on one node with 16 cores for 10 minutes:</p> <pre><code>#!/bin/bash\n#SBATCH --nodes=1\n#SBATCH --ntasks-per-node=24\n#SBATCH --partition=xeon24\n#SBATCH --time=0-00:10:00  # 10 minutes\n#SBATCH --job-name=hello\n#SBATCH --output=hello.out\n\nmodule load Python/3.11.3-GCCcore-12.3.0\npython hello.py\n</code></pre> <p>You can save this script as <code>hello.sh</code> and submit it to the cluster with this command:</p> <pre><code>sbatch hello.sh\n</code></pre> <p>The body for running a calculation with the AMS package could be:</p> <pre><code># Load the software modules\nmodule use /home/energy/modules/modules/all\nmodule load AMS/2023\n\n# Run the program\nams inputfile\n</code></pre> <p>See also how to edit files.</p> <p>If you feel it is too cumbersome to create submit files for <code>sbatch</code>, then <code>myqueue</code> might be something for you.</p>"},{"location":"slurm/#basic-slurm-commands","title":"Basic Slurm Commands","text":"<p>Here are some basic Slurm commands and their usage:</p> <ul> <li> <p><code>sbatch</code>: This command submits a job script to the cluster. A job script is a file that contains the parameters and commands for your job. For example, <code>sbatch hello.sh</code> will submit the job script <code>hello.sh</code> to the cluster. You can also specify some parameters as options in the command line, such as <code>-N</code> for number of nodes, <code>-n</code> for number of tasks, <code>-c</code> for number of cores per task, <code>-t</code> for time limit, etc. For example, <code>sbatch -N 2 -n 4 -c 2 -t 10:00 hello.sh</code> will submit the job script <code>hello.sh</code> with 2 nodes, 4 tasks, 2 cores per task, and 10 minutes time limit. These arguments can also be set with the <code>#SBATCH</code> instruction in the <code>hello.sh</code> script itself.</p> </li> <li> <p><code>squeue</code>: This command shows the status of the jobs in the cluster. For example, <code>squeue</code> will show all the jobs in the cluster with their job ID, partition, name, user, state, time, nodes, node list, etc. You can also use options to filter or format the output, such as <code>-u</code> for user name, <code>-p</code> for partition name, <code>-o</code> for output format, etc. For example, <code>squeue -u user</code> will show only the jobs submitted by user <code>user</code>, while <code>squeue -o \"%i %j %T\"</code> will show only the job ID, name, and state of each job.</p> </li> <li> <p><code>scancel</code>: This command cancels a job or a group of jobs in the cluster. For example, <code>scancel 123456</code> will cancel the job with ID 123456. You can also use options to specify criteria for cancelling jobs, such as <code>-u</code> for user name, <code>-p</code> for partition name, <code>-t</code> for job state, etc. For example, <code>scancel -u user -t PENDING</code> will cancel all the pending jobs submitted by user <code>user</code>.</p> </li> </ul>"},{"location":"slurm/#other-references","title":"Other references","text":"<ul> <li>Niflheim wiki - Submitting batch jobs to Niflheim</li> <li>Slurm Workload Manager - Slurm Tutorials - SchedMD</li> <li>A simple Slurm guide for beginners - RONIN BLOG</li> <li>Slurm Tutorial - Gowda</li> <li>Slurm Workload Manager - Quick Start User Guide - SchedMD</li> </ul>"},{"location":"slurm/#slurm-helper-scripts","title":"Slurm helper scripts","text":"<p>Just to highlight the highly useful Slurm tools written by the system administrator of Niflheim:</p> <ul> <li> <p><code>showpartitions</code>: Show the load of the cluster, how many jobs are in queue for the different partitions. Available nodes are shown in green.</p> </li> <li> <p><code>showuserjobs</code>: List the running and queued jobs per user.</p> </li> <li> <p><code>pestat</code>: List the status of nodes running jobs. <code>pestat -u $USER</code> will show your running jobs. Badly behaving jobs are highlighted in red.</p> </li> </ul>"},{"location":"storage/","title":"Storage","text":"<p>When starting work on Niflheim, you will get a home folder at <code>/home/energy/$USER</code>, where <code>$USER</code> is your Niflheim username. This folder is located on a server (<code>niflfs6</code>) on which you have a specific storage quota. Check your quota with <code>quota -s</code>. This command will list your usage and quota on all servers where you have files.</p> <p>Folders under <code>/home/energy</code> are backed up daily and kept for three months. If you accidentally delete some files, you can ask one of the Niflheim administrators to recreate the files from the backup.</p> <p>If you run out of storage space, i.e. you have exhausted your quota, the first option is always:</p> <ul> <li>Clean up your files! Many output files from calculations are never used and can safely be removed. The most critical files are input scripts that determine the input parameters of a calculation. Output files can almost always be recreated by rerunning the calculation.</li> </ul> <p>After cleaning up files, there are two options:</p> <ul> <li>Ask for access to <code>/home/scratch3</code> (<code>/home/scratch3</code> has no backup). You can get a larger quota on <code>/home/scratch3</code>, suitable for a temporary project where you can finish the calculations and perform analysis within a reasonable amount of time. Once you finish the calculations in a project, the output and results can be moved back to <code>/home/energy</code> (after cleanup).</li> </ul> <p>or</p> <ul> <li>Ask for a larger quota on <code>/home/energy/</code>. Please specify the required quota.</li> </ul>"}]}